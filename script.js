// –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
            target.scrollIntoView({ behavior: 'smooth' });
        }
    });
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞
let currentAudio = null;

// –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ —Ç—Ä–µ–∫–æ–≤ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
function resetTrackClasses() {
    const body = document.body;
    const trackClasses = Array.from(body.classList).filter(cls => cls.match(/^track\d+-bg$/));
    body.classList.remove(...trackClasses);
    console.log('–°–±—Ä–æ—à–µ–Ω—ã –∫–ª–∞—Å—Å—ã —Ç—Ä–µ–∫–æ–≤:', trackClasses); // –õ–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞
    setTimeout(() => {
        body.offsetHeight; // Reflow
    }, 20);
}

// –§—É–Ω–∫—Ü–∏—è –ø–∞—É–∑—ã –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤ –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)
async function pauseAll(excludeAudio) {
    console.log('–ü–∞—É–∑–∞ –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤...');
    for (let player of players) {
        const audio = player.querySelector('audio');
        const btn = player.querySelector('.play-btn');
        const progress = player.querySelector('.progress');
        if (audio !== excludeAudio && !audio.paused) {
            audio.pause();
            audio.currentTime = 0;
            btn.textContent = '‚ñ∂';
            btn.classList.remove('playing');
            progress.style.width = '0%';
            console.log(`–ü–∞—É–∑–∞ —Ç—Ä–µ–∫–∞ ${Array.from(players).indexOf(player) + 1}`);
        }
    }
    // –°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–æ–Ω–æ–≤ —Ç—Ä–µ–∫–æ–≤
    resetTrackClasses();
}

// –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–ª–µ–µ—Ä
const players = document.querySelectorAll('.custom-player');
players.forEach((player, index) => {
    const btn = player.querySelector('.play-btn');
    const audio = player.querySelector('audio');
    const progress = player.querySelector('.progress');
    const timeEl = player.querySelector('.time');
    const volumeSlider = player.querySelector('input[type="range"]');
    const volumeIcon = player.querySelector('.volume-icon');
    const coverImg = player.querySelector('.track-cover'); // –ï—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª –æ–±–ª–æ–∂–∫–∏
    let isPlaying = false;
    let currentTime = 0;

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥—Ä–æ–º–∫–æ—Å—Ç—å 80%
    const defaultVolume = 0.8;
    volumeSlider.value = defaultVolume;
    audio.volume = defaultVolume;
    
    function updateVolumeIcon() {
        if (audio.volume === 0) {
            volumeIcon.textContent = 'üîá';
        } else {
            volumeIcon.textContent = 'üîä';
        }
    }
    updateVolumeIcon();

    // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ play/pause
    btn.addEventListener('click', async () => {
        if (isPlaying) {
            console.log(`–ü–∞—É–∑–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞ ${index + 1}`);
            audio.pause();
            btn.textContent = '‚ñ∂';
            btn.classList.remove('playing');
            if (currentAudio === audio) {
                currentAudio = null;
            }
            resetTrackClasses(); // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å
            if (coverImg) {
                coverImg.classList.remove('show');
                setTimeout(() => coverImg.style.display = 'none', 500);
            }
            isPlaying = false;
        } else {
            await pauseAll(audio);
            await new Promise(resolve => setTimeout(resolve, 100));
            try {
                console.log(`Play —Ç—Ä–µ–∫–∞ ${index + 1}`);
                await audio.play();
                btn.textContent = '‚è∏';
                btn.classList.add('playing');
                setTimeout(() => {
                    resetTrackClasses(); // –ï—â—ë —Ä–∞–∑ —Å–±—Ä–æ—Å –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
                    document.body.classList.add(`track${index + 1}-bg`);
                }, 50);
                currentAudio = audio;
                if (coverImg) {
                    coverImg.style.display = 'block';
                    setTimeout(() => coverImg.classList.add('show'), 10);
                }
                isPlaying = true;
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
                alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞—É–¥–∏–æ. –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª –∏–ª–∏ –±—Ä–∞—É–∑–µ—Ä.');
            }
        }
    });

    // –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ –≤—Ä–µ–º—è
    audio.addEventListener('loadedmetadata', () => {
        timeEl.textContent = '0:00 / ' + formatTime(audio.duration);
    });
    audio.addEventListener('timeupdate', () => {
        if (audio.duration) {
            const percent = (audio.currentTime / audio.duration) * 100;
            progress.style.width = percent + '%';
            currentTime = audio.currentTime;
            timeEl.textContent = formatTime(currentTime) + ' / ' + formatTime(audio.duration);
        }
    });

    // –ö–ª–∏–∫ –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É
    player.querySelector('.progress-bar').addEventListener('click', (e) => {
        if (audio.duration) {
            const rect = e.currentTarget.getBoundingClientRect();
            const pos = (e.clientX - rect.left) / rect.width;
            audio.currentTime = pos * audio.duration;
        }
    });

    // –ì—Ä–æ–º–∫–æ—Å—Ç—å
    volumeSlider.addEventListener('input', () => {
        audio.volume = parseFloat(volumeSlider.value);
        updateVolumeIcon();
    });

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞
    audio.addEventListener('ended', () => {
        console.log(`–¢—Ä–µ–∫ ${index + 1} –∑–∞–≤–µ—Ä—à—ë–Ω`);
        btn.textContent = '‚ñ∂';
        btn.classList.remove('playing');
        isPlaying = false;
        progress.style.width = '0%';
        if (currentAudio === audio) {
            currentAudio = null;
        }
        resetTrackClasses(); // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å
        if (coverImg) {
            coverImg.classList.remove('show');
            setTimeout(() => coverImg.style.display = 'none', 500);
        }
    });

    // –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ
    audio.addEventListener('error', (e) => {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ:', e);
        btn.textContent = '‚ùå';
        timeEl.textContent = '–û—à–∏–±–∫–∞ —Ñ–∞–π–ª–∞';
    });
});

// –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
function formatTime(seconds) {
    if (!seconds || isNaN(seconds)) return '0:00';
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return mins + ':' + (secs < 10 ? '0' : '') + secs;
}
// –¢–µ–º–Ω—ã–π —Ä–µ–∂–∏–º
function toggleTheme() {
    document.body.classList.toggle('dark-mode');
    const isDark = document.body.classList.contains('dark-mode');
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏–∫–æ–Ω–∫–∏ –∫–Ω–æ–ø–∫–∏
    const sun = document.querySelector('.sun');
    const moon = document.querySelector('.moon');
    if (isDark) {
        sun.style.display = 'none';
        moon.style.display = 'block';
    } else {
        sun.style.display = 'block';
        moon.style.display = 'none';
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π —Ç–µ–º—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
window.addEventListener('load', () => {
    const savedTheme = localStorage.getItem('theme') || 'light';
    if (savedTheme === 'dark') {
        document.body.classList.add('dark-mode');
        // –ò–∫–æ–Ω–∫–∏
        document.querySelector('.sun').style.display = 'none';
        document.querySelector('.moon').style.display = 'block';
    }
});
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–π (fade-in –ø–æ —Å–∫—Ä–æ–ª–ª—É)
const observer = new IntersectionObserver(entries => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            entry.target.style.animationDelay = '0.2s';
            entry.target.classList.add('animate-fade');
        }
    });
});
document.querySelectorAll('.animate-fade').forEach(el => observer.observe(el));

